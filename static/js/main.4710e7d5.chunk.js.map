{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onInputSelectionChange","event","setState","selectedOption","target","value","onThSliderChange","thSliderValue","checkValidSliders","determineCircleColor","setTemp","updateResult","updateArrowSize","console","log","state","wArrowSize","qhArrowSize","qcArrowSize","onTcSliderChange","tcSliderValue","onCalcSubmit","circle","inValue","red","blue","green","rgbString","concat","defineProperty","Kelvin","type","tempType","t","tempConversions","toCelsius","toFixed","toFahrenheit","inputChangeW","W","inputChangeQc","Qc","inputChangeQh","Qh","selected","E","ThermoCalculations","calculateE","calcQcFromW","calcQhFromW","efficiency","calcWFromQc","calcQhFromQc","calcWFromQh","calcQcFromQh","onTempSelectionChange","ontMaxChange","tMax","onUserInputChange","userInput","onResetClick","qhSize","arrowSize","setArrowWidth","scaleValue","qcSize","wSize","tcCircleColor","thCircleColor","tcTemp","thTemp","wInput","qhInput","qcInput","Handle","Slider","handle","dragging","index","restProps","objectWithoutProperties","react_default","a","createElement","rc_tooltip_es","prefixCls","overlay","visible","placement","key","assign","className","App_RadioButton","checked","onChange","App_CheckBox","name","es","min","max","marks","1","1000","2000","3000","4000","5000","6000","7000","8000","9000","10000","step","0","9999","100","200","300","400","500","600","700","800","900","999","App_InputBox","disabled","onClick","App_Circle","colorCode","circleName","xPos","yPos","radius","index_es","angle","length","lineWidth","App_Rectangle","fill","width","height","App_ResultPanel","Th","Tc","Component","Circle","_this$props","_this$props$circleNam","cx","cy","r","RadioButton","_this$props2","_this$props2$type","_this$props2$name","InputBox","_this$props3","_this$props3$type","CheckBox","_this$props4","_this$props4$type","_this$props4$name","parseFloat","ResultPanel","_this$props5","Rectangle","_this$props6","transform","inVal","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4710e7d5.chunk.js","sourcesContent":["// this makes circles\n\n//0.3 adds in buttons\n//0.4 add textboxes to the buttons and style with css\n//0.5 adds a calculate button and an object containing all of the calculations, also adds sliders\n//0.6 use slider input to select color of the circles, formats the circles on the page\n//0.7 add limits to the sliders where tc cannot be higher than tc\n//0.8 adds in the calculations and results and some formatting -- not necessarily correct\n//0.9 adds in the choice to select which temperature system changed (resets slider to 0) the results panel to be formatted with a table\n//0.10 adds tmax buttons and switching sliders and user input box\n//0.11 adds reset button, when tempType changed, temperatures are converted\n//0.12 adds in a heat engine and arrows\n//0.13 adds in the arrows changing size\n\n\n\n//must use npm rc-slider and rc-tooltip if copying this file to a new file\nimport React, {Component} from 'react';\nimport './App.css';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport Tooltip from 'rc-tooltip';\nimport 'rc-tooltip/assets/bootstrap.css';\n//import Poly from \"react-svg-polygon\";\nimport Arrow from \"@elsdoerfer/react-arrow\";\n\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedOption: \"Qh\",\n      thSliderValue : 1,\n      tcSliderValue : 0,\n      tcCircleColor : \"rgb(0, 0, 0)\",\n      thCircleColor : \"rgb(0, 0, 0)\",\n      efficiency:\"0.00%\",\n      Qh:100,\n      Qc:0,\n      W:0,\n      tempType:\"K\",\n      tcTemp:0,\n      thTemp:0,\n      userInput:false,\n      tMax:\"10000\",\n      qhArrowSize:20,\n      qcArrowSize:20,\n      wArrowSize:20,\n      wInput:\"\",\n      qhInput:\"\",\n      qcInput:\"\",\n    };\n  }\n\n  //changes the state when a new radio button to change the input is selected\n  onInputSelectionChange = (event) => {\n    this.setState({selectedOption:event.target.value});\n  };\n\n  //updates the state with the new th slider value\n  //makes sure the slider input is valid\n  //determines the color of the circle and coverts the temperature if necessary\n  //also updates the other values according to what is selected\n  onThSliderChange = (value) => {\n    this.setState({thSliderValue: value});\n    this.checkValidSliders(\"th\", value);\n    this.determineCircleColor(\"thCircleColor\", value);\n    this.setTemp(value, \"thTemp\");\n    this.updateResult();\n    this.updateArrowSize();\n    console.log(this.state.wArrowSize, this.state.qhArrowSize, this.state.qcArrowSize);\n  };\n\n  //updates the state with the new th slider value\n  //makes sure the slider input is valid\n  //determines the color of the circle and coverts the temperature if necessary\n  //also updates the other values according to what is selected\n  onTcSliderChange = (value) => {\n    this.setState({tcSliderValue:value});\n    this.checkValidSliders(\"tc\", value);\n    this.determineCircleColor(\"tcCircleColor\", value);\n    this.setTemp(value, \"tcTemp\");\n    this.onCalcSubmit();\n    this.updateArrowSize();\n  };\n\n  //determines what color the circle should be with each individual rbg value, puts it into a string and assigns it\n  //to the appropriate circle\n  determineCircleColor = (circle, inValue) =>{\n    let red, blue, green;\n    if(inValue <= 12){\n      red = 0;\n      blue = 0;\n      green = 0;\n    }\n    else if(inValue > 12 && inValue <= 3061){\n      red = inValue/12;\n      blue=0;\n      green=0;\n    }\n    else if(inValue > 3061 && inValue <= 6100){\n      red=255;\n      blue=(inValue/12)-255;\n      green=0;\n    }\n    else if(inValue > 6100 && inValue <= 9150){\n      red=255;\n      blue=255;\n      green=(inValue/12) - 510;\n    }\n    else if(inValue > 9150 && inValue <= 10000){\n      red=255;\n      blue=255;\n      green=255;\n    }\n    //determine rgb to be used in the string\n    const rgbString = `rgb(${red}, ${blue}, ${green})`;\n    this.setState({[circle]:rgbString});\n  };\n\n  //checks to make sure that the slider values are correct\n  //th is always higher than tc\n  checkValidSliders = (circle, value) => {\n    if(circle===\"tc\"){\n      if(value >= this.state.thSliderValue){\n        this.setState({thSliderValue:value+2});\n        this.determineCircleColor(\"thCircleColor\", (value+2));\n      }\n    }\n    else{\n      if(value <= this.state.tcSliderValue){\n        this.setState({tcSliderValue:value-2});\n        this.determineCircleColor(\"tcCircleColor\", (value-2));\n      }\n    }\n  };\n\n  //determines what temp system to use from the state and converts\n  //the temp to the appropriate system with methods from\n  //thermocalulator object\n  setTemp = (Kelvin, type) => {\n    if(this.state.tempType===\"K\"){\n      this.setState({[type]: Kelvin});\n    }\n    else if(this.state.tempType===\"C\"){\n      const t = tempConversions.toCelsius(Kelvin).toFixed(2);\n      this.setState({[type]:t});\n    }\n    else {\n      const t = tempConversions.toFahrenheit(Kelvin).toFixed(2);\n      this.setState({[type]:t});\n    }\n  };\n  // end of setTemp\n\n  //changes when something is typed into the W box\n  inputChangeW = (event)=>{\n    this.setState({\"W\":event.target.value});\n  };\n\n  //changes when something is typed into the QC box\n  inputChangeQc = (event) => {\n    this.setState({\"Qc\":event.target.value});\n  };\n\n  //changes when something is typed into the Qh\n  inputChangeQh = (event) => {\n    this.setState({\"Qh\":event.target.value});\n  };\n\n\n  //does the calculations based on the current state using thermocalculations object\n  onCalcSubmit = () => {\n    this.updateResult();\n  };  //end of onCalcSubmit\n\n\n  //calculates results based on the current state of the app\n  updateResult = () => {\n    const selected = this.state.selectedOption;\n    if(selected===\"W\"){\n      const E = (ThermoCalculations.calculateE(this.state.tcSliderValue, this.state.thSliderValue));\n      const Qc = (ThermoCalculations.calcQcFromW(this.state.W, E));\n      const Qh = (ThermoCalculations.calcQhFromW(Qc, this.state.W));\n      this.setState({efficiency:`${E*100}%`, Qc:Qc, Qh:Qh});\n    }\n    else if(selected===\"Qc\"){\n      const E = (ThermoCalculations.calculateE(this.state.tcSliderValue, this.state.thSliderValue));   //keeps to 2 decimal places\n      const W = (ThermoCalculations.calcWFromQc(this.state.Qc, E));\n      const Qh = (ThermoCalculations.calcQhFromQc(this.state.Qc, W));\n      this.setState({efficiency:`${E*100}%`, W:W, Qh:Qh});\n    }//end of Qc if block\n    else if(selected===\"Qh\"){\n      const E = (ThermoCalculations.calculateE(this.state.tcSliderValue, this.state.thSliderValue));\n      const W = (ThermoCalculations.calcWFromQh(E, this.state.Qh));\n      const Qc=(ThermoCalculations.calcQcFromQh(this.state.Qh, W));\n      this.setState({efficiency:`${E*100}%`, W:W, Qc:Qc});\n    }//end of Qh block\n  };\n\n\n  //changes the temp system and converts the temperatures in a callback function so that its not delayed\n  onTempSelectionChange = (event) => {\n    //must be a callback function so that the current state value is used\n    this.setState({tempType : event.target.value}, ()=>{\n      if(this.state.tempType === \"C\"){\n        this.setTemp(this.state.tcSliderValue, \"tcTemp\");\n        this.setTemp(this.state.thSliderValue, \"thTemp\");\n      }\n      else if(this.state.tempType===\"F\") {\n        this.setTemp(this.state.tcSliderValue, \"tcTemp\");\n        this.setTemp(this.state.thSliderValue, \"thTemp\");\n      }\n      else{\n        this.setTemp(this.state.tcSliderValue, \"tcTemp\");\n        this.setTemp(this.state.thSliderValue, \"thTemp\");\n      }\n    });\n  }; //end of onTempSelection Change\n\n\n  // changes the state to the current max of the sliders\n  //callback function so that the methods called after set state use the correct state to determine\n  //their output\n  ontMaxChange = (event) => {\n    this.setState({\n      tMax:event.target.value,\n      thSliderValue:1,\n      tcSliderValue:0,\n    }, () => {\n      this.updateResult();\n      this.determineCircleColor(\"thCircleColor\", this.state.thSliderValue);\n      this.determineCircleColor(\"tcCircleColor\", this.state.tcSliderValue);\n    });\n\n  };\n\n  //toggles user input\n  //if true, the sliders and input boxes are shown\n  //if false, they are not shown\n  onUserInputChange = () => {\n    this.setState({userInput:!this.state.userInput});\n  };\n\n  //run when the reset button is clicked\n  //calculates with the current state and qh changes to 100\n  onResetClick = () => {\n    this.setState({Qh:100});\n    const E = (ThermoCalculations.calculateE(this.state.tcSliderValue, this.state.thSliderValue));\n    const W = (ThermoCalculations.calcWFromQh(E, this.state.Qh));\n    const Qc=(ThermoCalculations.calcQcFromQh(this.state.Qh, W));\n    this.setState({efficiency:`${E*100}%`, W:W, Qc:Qc});\n  };\n\n  updateArrowSize = () => {\n    const qhSize = arrowSize.setArrowWidth(arrowSize.scaleValue(this.state.Qh, this.state.Qh));\n    const qcSize = arrowSize.setArrowWidth(arrowSize.scaleValue(this.state.Qc, this.state.Qh));\n    const wSize = arrowSize.setArrowWidth(arrowSize.scaleValue(this.state.W, this.state.Qh));\n\n    this.setState({\n      qhArrowSize:qhSize,\n      qcArrowSize:qcSize,\n      wArrowSize:wSize,\n    })\n  };\n\n\n  render() {\n\n    //creates the tooltip over the slider when moved\n    const Handle = Slider.Handle;\n    const handle = (props) => {\n      const{value, dragging, index, ...restProps} = props;\n      return(\n          <Tooltip\n              prefixCls=\"rc-slider-tooltip\"\n              overlay={value}\n              visible={dragging}\n              placement=\"top\"\n              key={index}\n          >\n            <Handle value={value} {...restProps} />\n          </Tooltip>\n      );\n    };\n\n\n    return (\n        <div className=\"thermocalculatorApp\">\n          <div className=\"TempSelection\">\n\n            <div>\n              <label className = \"TempScale\">Temperature Scale </label>\n              <RadioButton\n                  value=\"K\"\n                  checked={this.state.tempType === \"K\"}\n                  className=\"TempRadioButton\"\n                  onChange={this.onTempSelectionChange}\n              />\n              <label className=\"TempLabel\">Kelvin</label>\n            </div>  {/*end of the Kelvin Button Div */}\n\n            <div>\n              <RadioButton\n                  value=\"C\"\n                  checked={this.state.tempType===\"C\"}\n                  className=\"TempRadioButton\"\n                  onChange={this.onTempSelectionChange}\n              />\n              <label className=\"TempLabel\">Celsius</label>\n            </div> {/*end of the celsius button div */}\n\n            <div>\n              <RadioButton\n                  value=\"F\"\n                  checked={this.state.tempType===\"F\"}\n                  className=\"TempRadioButton\"\n                  onChange={this.onTempSelectionChange}\n              />\n              <label className=\"TempLabel\">Fahrenheit</label>\n            </div> {/*end of the Fahrenheit button div */}\n\n          </div> {/*end of the temp selection div */}\n\n          <div className=\"MaxTempSelector\">\n\n            <div>\n              <RadioButton\n                  value=\"1000\"\n                  checked={this.state.tMax===\"1000\"}\n                  className=\"MaxTempRadioButton\"\n                  onChange={this.ontMaxChange}\n              />\n              <label className=\"tMaxLabel\">Tmax = 1000 K</label>\n            </div>\n\n            <div>\n              <RadioButton\n                  value=\"10000\"\n                  checked={this.state.tMax===\"10000\"}\n                  className=\"MaxTempRadioButton\"\n                  onChange={this.ontMaxChange}\n              />\n              <label className=\"tMaxLabel\">Tmax = 10000 K </label>\n            </div>\n\n          </div> {/* end of the max temp selector div */}\n\n          <div className=\"userInput\">\n            <CheckBox\n                checked={this.state.userInput}\n                onChange={this.onUserInputChange}\n                name=\"userInputCheckbox\"\n            />\n\n            <label>User Input</label>\n          </div>\n\n          <div className=\"Sliders\">\n            {this.state.tMax === \"10000\" &&\n            <div className=\"ThSlider10000\">\n              <label className=\"Slider-Label\">Th</label>\n              <Slider\n                  className=\"Slide\"\n                  min={1}\n                  max={10000}\n                  value={this.state.thSliderValue}\n                  onChange={this.onThSliderChange}\n                  marks={{\n                    1: 1,\n                    1000: 1000,\n                    2000: 2000,\n                    3000: 3000,\n                    4000: 4000,\n                    5000: 5000,\n                    6000: 6000,\n                    7000: 7000,\n                    8000: 8000,\n                    9000: 9000,\n                    10000: 10000\n                  }}\n                  handle={handle}\n                  step={0.01}\n              />\n              <br/> <br/> <br/>\n            </div>\n            }\n\n            {this.state.tMax === \"10000\" &&\n            <div className=\"TcSlider10000\">\n              <label className=\"Slider-Label\">Tc</label>\n              <Slider\n                  className=\"Slide\"\n                  min={0}\n                  max={9999}\n                  value={this.state.tcSliderValue}\n                  onChange={this.onTcSliderChange}\n                  marks={{\n                    0: 0,\n                    1000: 1000,\n                    2000: 2000,\n                    3000: 3000,\n                    4000: 4000,\n                    5000: 5000,\n                    6000: 6000,\n                    7000: 7000,\n                    8000: 8000,\n                    9000: 9000,\n                    9999: 9999\n                  }}\n                  handle={handle}\n                  step={0.01}\n              />\n              <br/>\n            </div>\n            }\n\n            {this.state.tMax===\"1000\" &&\n            <div className=\"ThSlider1000\">\n              <label className=\"Slider-Label\">Th</label>\n              <Slider\n                  className=\"Slide\"\n                  min={1}\n                  max={1000}\n                  value={this.state.thSliderValue}\n                  onChange={this.onThSliderChange}\n                  marks={{\n                    1: 1,\n                    100:100,\n                    200:200,\n                    300:300,\n                    400:400,\n                    500:500,\n                    600:600,\n                    700:700,\n                    800:800,\n                    900:900,\n                    1000: 1000,\n                  }}\n                  handle={handle}\n                  step={0.01}\n              />\n              <br/> <br/> <br/>\n            </div>\n            }\n\n            {this.state.tMax===\"1000\" &&\n            <div className=\"TcSlider10000\">\n              <label className=\"Slider-Label\">Tc</label>\n              <Slider\n                  className=\"Slide\"\n                  min={0}\n                  max={999}\n                  value={this.state.tcSliderValue}\n                  onChange={this.onTcSliderChange}\n                  marks={{\n                    0: 0,\n                    100:100,\n                    200:200,\n                    300:300,\n                    400:400,\n                    500:500,\n                    600:600,\n                    700:700,\n                    800:800,\n                    900:900,\n                    999: 999\n                  }}\n                  handle={handle}\n                  step={0.01}\n              />\n              <br/>\n            </div>\n            }\n\n          </div> {/*end of the sliders div */}\n          {this.state.userInput &&\n          <div className=\"input\">\n\n            <div className=\"inputSelection\">\n\n              <div className=\"Qh-Selection\">\n                <RadioButton\n                    value=\"Qh\"\n                    checked={this.state.selectedOption === \"Qh\"}\n                    className=\"radio-button\"\n                    onChange = {this.onInputSelectionChange}\n                />\n\n                <label className=\"Input-Labels\">Qh</label>\n\n                <InputBox\n                    className=\"input-box\"\n                    disabled={this.state.selectedOption !== \"Qh\"}\n                    onChange={this.inputChangeQh}\n                />\n\n              </div>\n\n              <div className=\"Qc-Selection\">\n\n                <RadioButton\n                    value={\"Qc\"}\n                    className={\"radio-button\"}\n                    onChange={this.onInputSelectionChange}\n                    checked={this.state.selectedOption === \"Qc\"}\n                />\n\n                <label>Qc</label>\n\n                <InputBox\n                    className=\"input-box\"\n                    disabled={this.state.selectedOption !== \"Qc\"}\n                    onChange={this.inputChangeQc}\n                />\n\n              </div>\n\n              <div className=\"W-Selection\">\n\n                <RadioButton\n                    value={\"W\"}\n                    className={\"radio-button\"}\n                    onChange={this.onInputSelectionChange}\n                    checked={this.state.selectedOption === \"W\"}\n                />\n\n                <label>W</label>\n\n                <InputBox\n                    className=\"input-box\"\n                    disabled={this.state.selectedOption !== \"W\"}\n                    onChange={this.inputChangeW}\n                />\n\n                <div className =\"Calculate-Button\">\n\n                  <button\n                      type=\"button\"\n                      onClick={this.onCalcSubmit}\n                      className=\"Calculate-Button\"\n                  >\n                    Calculate\n                  </button>\n\n                </div>\n\n                <div className=\"Reset-Button\">\n                  <button\n                      type=\"button\"\n                      onClick={this.onResetClick}\n                      className=\"Reset-Button\"\n                  >\n                    Reset Qh(100 J)\n                  </button>\n                </div>\n\n              </div>\n\n            </div>\n          </div>\n          }\n\n          <div className=\"diagrams\">\n            <div className = \"ThCircle\">\n              <Circle\n                  colorCode={this.state.thCircleColor}\n                  circleName=\"Th\"\n                  xPos={50}\n                  yPos={55}\n                  radius={35}\n              />\n              <label className=\"thCircleLabel\">Hot Source at Th</label>\n            </div>\n\n            <div>\n              <label className=\"qhArrowLabel\">Qh > </label>\n              <Arrow\n                  angle={180}\n                  length={10}\n                  lineWidth={this.state.qhArrowSize/50}\n                  className=\"qhArrow\"\n              />\n            </div>\n\n            <div className = \"HeatEngine\">\n              <Rectangle\n                  fill=\"lightgreen\"\n                  width={80}\n                  height={80}\n              />\n              <label className=\"HeatEngineLabel\">Heat Engine</label>\n            </div>\n\n            <div>\n              <label className=\"qcArrowLabel\"> Qc > </label>\n              <Arrow\n                  angle={180}\n                  length={10}\n                  lineWidth={this.state.qcArrowSize/50}\n                  className=\"qcArrow\"\n              />\n            </div>\n\n            <div className = \"TcCircle\">\n              <Circle\n                  colorCode={this.state.tcCircleColor}\n                  circleName=\"Tc\"\n                  xPos={50}\n                  yPos={55}\n                  radius={35}\n              />\n              <label className=\"tcCircleLabel\">Cold Source at Tc</label>\n            </div>\n\n            <div>\n              <Arrow\n                  angle={90}\n                  length={10}\n                  lineWidth={this.state.wArrowSize/50}\n                  className=\"workArrow\"\n                />\n\n            </div>\n\n          </div>\n\n          <div className=\"ResultsPanel\">\n            <ResultPanel\n                efficiency={this.state.efficiency}\n                Qh={this.state.Qh}\n                Qc={this.state.Qc}\n                W={this.state.W}\n                Th={this.state.thTemp}\n                Tc={this.state.tcTemp}\n                tempType={this.state.tempType}\n            />\n\n          </div>\n\n        </div>\n    ); //end of return\n  }// end of render\n\n}//end of app class\n\n//creates circles using svg\n//takes in color, name, its position, and the radius of the circle\nclass Circle extends Component {\n  render(){\n    const{\n      colorCode,\n      circleName = \"\", //optional variable\n      xPos,\n      yPos,\n      radius,\n    } = this.props;\n\n    return (\n\n        <svg>\n          <circle cx={xPos} cy={yPos} r={radius} fill={colorCode} className={circleName}/>\n        </svg>\n    ); //end of return\n  }//end of render\n}//end of circle component\n\n//creates radio buttons\n//takes in a value, whether its checked, a name, and a function to do when a change occurs\nclass RadioButton extends Component {\n\n  render () {\n\n    const {\n      type = \"radio\",\n      value,\n      checked,\n      name = \"\",\n      onChange,\n    } = this.props;\n\n\n    return (\n        <input\n            type={type}\n            name={name}\n            value={value}\n            checked={checked}\n            onChange={onChange}\n        />\n    ); //end of return\n\n\n  } // end of render\n}// end of RadioButton\n\n//creates input boxes\n//takes in className so that its easier to change all of them, whether its disabled or not, and a funciton\n//for when a change happens\nclass InputBox extends Component {\n  render() {\n    const {\n      type=\"text\",\n      className,\n      disabled,\n      onChange,\n    } = this.props;\n\n    return (\n        <input\n            type={type}\n            className={className}\n            disabled={disabled}\n            onChange={onChange}\n        />\n    )//end of return\n  }//end of render\n\n}//end of InputBox\n\n\n//creates a checkbox\n//takes in whether or not its checked, a name, and a function for when a change happens\nclass CheckBox extends Component {\n  render() {\n    const {\n      type=\"checkbox\",\n      checked,\n      name=\"\",\n      onChange\n\n    } = this.props;\n\n    return (\n        <input\n            type={type}\n            name={name}\n            checked={checked}\n            onChange={onChange}\n        />\n    ); //end of return\n  } //end of render\n}\n\n\n//object containing all of the calculations needed for the results panel of the app\nconst ThermoCalculations = {\n  calculateE : function(Tc, Th) {\n    const e = 1 - (Tc/Th);\n    return e.toFixed(2);\n  },\n\n  calcWFromQc : function(Qc, E) {\n    const w = Qc * (E/(1-E));\n    return w.toFixed(2);\n  },\n\n  calcQhFromQc : function(Qc, W){\n    const Qh = Qc + W;\n    return parseFloat(Qh).toFixed(2);\n  },\n\n  calcQcFromW : function(W, E){\n    const Qc = W/((1-E)/E);\n    return Qc.toFixed(2);\n  },\n\n  calcQhFromW : function(Qc, W) {\n    const Qh = Qc + W;\n    return Qh.toFixed(2);\n  },\n\n  calcWFromQh : function(E, Qh) {\n    const W = E*Qh;\n    return W.toFixed(2);\n  },\n\n  calcQcFromQh : function(Qh, W) {\n    const Qc = Qh-W;\n    return Qc.toFixed(2);\n  },\n};\n\n//creates the result panel\nclass ResultPanel extends Component {\n  render() {\n    const {\n      efficiency,\n      Qh,\n      Qc,\n      W,\n      Th,\n      Tc,\n      tempType\n    } = this.props;\n\n    return (\n        <table className = \"ResultsTable\">\n          <thead>\n          <tr>\n            <th>Results:</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <td>Efficiency:</td>\n            <td>{efficiency}</td>\n          </tr>\n\n          <tr>\n            <td>Qh:</td>\n            <td>{Qh} J</td>\n          </tr>\n\n          <tr>\n            <td>Qc:</td>\n            <td>{Qc} J</td>\n          </tr>\n\n          <tr>\n            <td>w: </td>\n            <td>{W} J</td>\n          </tr>\n\n          <tr>\n            <td>Th: </td>\n            <td>{Th} {tempType}</td>\n          </tr>\n\n          <tr>\n            <td>Tc: </td>\n            <td>{Tc} {tempType}</td>\n          </tr>\n          </tbody>\n        </table>\n    ); // end of return\n  }// end of render\n}//end of ResultPanel\n\n//object that contains the temperature conversations\n//conversations for kelvin to celsius and kelvin to fahrenheit\nconst tempConversions = {\n  toCelsius : function(Kelvin){\n    return Kelvin - 273.15;\n  },\n\n  toFahrenheit: function(Kelvin){\n    return ((Kelvin-273.15)*1.8)+32;\n  }\n}; // end of tempConversions\n\nclass Rectangle extends Component{\n  render () {\n    const {\n      className,\n      fill,\n      width,\n      height,\n      transform,\n    } = this.props;\n    return (\n        <svg>\n          <rect width={width} height={height} fill={fill} className={className} transform={transform}/>\n        </svg>\n    );\n  }\n}\n\n// class Triangle extends Component {\n//   render() {\n//     const {\n//       className = \"\",\n//       r,\n//     } = this.props;\n//     return(\n//         <Poly\n//             className={className}\n//             sides={3}\n//             r={r}\n//             fill=\"black\"\n//         />\n//\n//     );\n//   }\n// }\n//\n// class Arrow extends Component{\n//   render(){\n//     const {\n//       arrowBodyName,\n//       arrowBodyWidth,\n//       arrowHeadName,\n//       arrowHeadSize,\n//       arrowBodyHeight,\n//     }=this.props;\n//     return (\n//         <div>\n//           <div className={arrowBodyName}>\n//             <Rectangle\n//                 className={arrowBodyName}\n//                 fill=\"black\"\n//                 width={arrowBodyWidth}\n//                 height={arrowBodyHeight}\n//             />\n//           </div>\n//\n//           <div className={arrowHeadName}>\n//             <Triangle\n//                 className={arrowHeadName}\n//                 r={arrowHeadSize}\n//             />\n//           </div>\n//         </div>\n//     );\n//   }\n// }\n\n//contains methods related to determining the size of the different arrows\nconst arrowSize = {\n  scaleValue : function(inVal, Qh) {\n    return (inVal*100)/Qh;\n  },\n\n  setArrowWidth : function(inVal) {\n    const halfWorkArrowWidth = ((inVal/2.0)/2);\n    if(inVal > 10) {\n      return 2*halfWorkArrowWidth;\n    }\n    else if((inVal < 10)&&(inVal>0)){\n      return 5;\n    }\n    else{\n      return 0;\n    }\n\n  },\n};\n\nclass ArrowShape extends Component {\n  render() {\n    const {\n      angle,\n      length,\n      style\n    } = this.props;\n    return (\n      <Arrow\n          angle={angle}\n          length={length}\n          style={style}\n        />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}